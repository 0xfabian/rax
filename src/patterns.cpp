#include <patterns.h>

std::vector<std::string> conditions =
{
    "o", "no", "c b nae", "nc nb ae", "e z", "ne nz",
    "be na", "nbe a", "s", "ns", "p pe", "np po",
    "l nge", "nl ge", "le ng", "nle g"
};

std::vector<std::string> patterns =
{
"cbw                            : zo        66 98",
"cwde                           : zo        98",
"cdqe                           : zo        48 98",
"cwd                            : zo        66 99",
"cdq                            : zo        99",
"cqo                            : zo        48 99",
//----------------------------------------------------------
"cmc                            : zo        F5",
"clc                            : zo        F8",
"stc                            : zo        F9",
"cld                            : zo        FC",
"std                            : zo        FD",
"cli                            : zo        FA",
"sti                            : zo        FB",
//----------------------------------------------------------
"cpuid                          : zo        0F A2",
"rdtsc                          : zo        0F 31",
"rdmsr                          : zo        0F 32",
"wrmsr                          : zo        0F 30",
"sgdt   m                       : m         0F 01 /0",
"sidt   m                       : m         0F 01 /1",
"lgdt   m                       : m         0F 01 /2",
"lidt   m                       : m         0F 01 /3",
//----------------------------------------------------------
"ret                            : zo        C3",
"retf                           : zo        CB",
"leave                          : zo        C9",
"hlt                            : zo        F4",
"iret                           : zo        66 CF",
"iretd                          : zo        CF",
"iretq                          : zo        48 CF",
"syscall                        : zo        0F 05",
"sysret                         : zo        0F 07",
//----------------------------------------------------------
"popf                           : zo        66 9D",
"popfq                          : zo        9D",
"pushf                          : zo        66 9C",
"pushfq                         : zo        9C",
//----------------------------------------------------------
"int    imm8                    : i         CD i",
//----------------------------------------------------------
"nop    rm16                    : m         66 0F 1F /0",
"nop    rm32                    : m         0F 1F /0",
"nop    rm64                    : m         48 0F 1F /0",
"nop                            : zo        90",
//----------------------------------------------------------
"call   rel32                   : d         E8 i",
"call   rm64                    : m         FF /2",
//----------------------------------------------------------
"jmp    rel8                    : d         EB i",
"jmp    rel32                   : d         E9 i",
"jmp    rm64                    : m         FF /4",
//----------------------------------------------------------
"j__    rel8                    : d         70+c i",
"j__    rel32                   : d         0F 80+c i",
"jecxz  rel8                    : d         67 E3 i",
"jrcxz  rel8                    : d         E3 i",
//----------------------------------------------------------
"push   r16                     : o         66 50+r",
"push   r64                     : o         50+r",
"push   rm16                    : m         66 FF /6",
"push   rm64                    : m         FF /6",
"push   imm8                    : i         6A i",
"push   imm16                   : i         66 68 i",
"push   imm32                   : i         68 i",
//----------------------------------------------------------
"pop    r16                     : o         66 58+r",
"pop    r64                     : o         58+r",
"pop    rm16                    : m         66 8F /0",
"pop    rm64                    : m         8F /0",
//----------------------------------------------------------
"mov    rm8     r8              : mr        88 /r",
"mov    rm16    r16             : mr        66 89 /r",
"mov    rm32    r32             : mr        89 /r",
"mov    rm64    r64             : mr        48 89 /r",
"mov    r8      rm8             : rm        8A /r",
"mov    r16     rm16            : rm        66 8B /r",
"mov    r32     rm32            : rm        8B /r",
"mov    r64     rm64            : rm        48 8B /r",
"mov    r8      imm8            : oi        B0+r i",
"mov    r16     imm16           : oi        66 B8+r i",
"mov    r32     imm32           : oi        B8+r i",
"mov    rm64    imm32           : mi        48 C7 /0 i",
"mov    r64     imm64           : oi        48 B8+r i",
"mov    rm8     imm8            : mi        C6 /0 i",
"mov    rm16    imm16           : mi        66 C7 /0 i",
"mov    rm32    imm32           : mi        C7 /0 i",
//----------------------------------------------------------
"movsx  r16     rm8             : rm        66 0F BE /r",
"movsx  r32     rm8             : rm        0F BE /r",
"movsx  r64     rm8             : rm        48 0F BE /r",
"movsx  r32     rm16            : rm        0F BF /r",
"movsx  r64     rm16            : rm        48 0F BF /r",
//----------------------------------------------------------
"movsxd r16     rm16            : rm        66 63 /r",
"movsxd r32     rm32            : rm        63 /r",
"movsxd r64     rm32            : rm        48 63 /r",
//----------------------------------------------------------
"movzx  r16     rm8             : rm        66 0F B6 /r",
"movzx  r32     rm8             : rm        0F B6 /r",
"movzx  r64     rm8             : rm        48 0F B6 /r",
"movzx  r32     rm16            : rm        0F B7 /r",
"movzx  r64     rm16            : rm        48 0F B7 /r",
//----------------------------------------------------------
"cmov__ r16     rm16            : rm        66 0F 40+c /r",
"cmov__ r32     rm32            : rm        0F 40+c /r",
"cmov__ r64     rm64            : rm        48 0F 40+c /r",
//----------------------------------------------------------
"lea    r16     m               : rm        66 8D /r",
"lea    r32     m               : rm        8D /r",
"lea    r64     m               : rm        48 8D /r",
//----------------------------------------------------------
"set__  rm8                     : m         0F 90+c /0",
//----------------------------------------------------------
"add    al      imm8            : i         04 i",
"add    rm8     imm8            : mi        80 /0 i",
"add    rm16    imm8            : mi        66 83 /0 i",
"add    rm32    imm8            : mi        83 /0 i",
"add    rm64    imm8            : mi        48 83 /0 i",
"add    ax      imm16           : i         66 05 i",
"add    rm16    imm16           : mi        66 81 /0 i",
"add    eax     imm32           : i         05 i",
"add    rm32    imm32           : mi        81 /0 i",
"add    rax     imm32           : i         48 05 i",
"add    rm64    imm32           : mi        48 81 /0 i",
"add    rm8     r8              : mr        00 /r",
"add    rm16    r16             : mr        66 01 /r",
"add    rm32    r32             : mr        01 /r",
"add    rm64    r64             : mr        48 01 /r",
"add    r8     rm8              : rm        02 /r",
"add    r16    rm16             : rm        66 03 /r",
"add    r32    rm32             : rm        03 /r",
"add    r64    rm64             : rm        48 03 /r",
//----------------------------------------------------------
"adc    al      imm8            : i         14 i",
"adc    rm8     imm8            : mi        80 /2 i",
"adc    rm16    imm8            : mi        66 83 /2 i",
"adc    rm32    imm8            : mi        83 /2 i",
"adc    rm64    imm8            : mi        48 83 /2 i",
"adc    ax      imm16           : i         66 15 i",
"adc    rm16    imm16           : mi        66 81 /2 i",
"adc    eax     imm32           : i         15 i",
"adc    rm32    imm32           : mi        81 /2 i",
"adc    rax     imm32           : i         48 15 i",
"adc    rm64    imm32           : mi        48 81 /2 i",
"adc    rm8     r8              : mr        10 /r",
"adc    rm16    r16             : mr        66 11 /r",
"adc    rm32    r32             : mr        11 /r",
"adc    rm64    r64             : mr        48 11 /r",
"adc    r8     rm8              : rm        12 /r",
"adc    r16    rm16             : rm        66 13 /r",
"adc    r32    rm32             : rm        13 /r",
"adc    r64    rm64             : rm        48 13 /r",
//----------------------------------------------------------
"sub    al      imm8            : i         2C i",
"sub    rm8     imm8            : mi        80 /5 i",
"sub    rm16    imm8            : mi        66 83 /5 i",
"sub    rm32    imm8            : mi        83 /5 i",
"sub    rm64    imm8            : mi        48 83 /5 i",
"sub    ax      imm16           : i         66 2D i",
"sub    rm16    imm16           : mi        66 81 /5 i",
"sub    eax     imm32           : i         2D i",
"sub    rm32    imm32           : mi        81 /5 i",
"sub    rax     imm32           : i         48 2D i",
"sub    rm64    imm32           : mi        48 81 /5 i",
"sub    rm8     r8              : mr        28 /r",
"sub    rm16    r16             : mr        66 29 /r",
"sub    rm32    r32             : mr        29 /r",
"sub    rm64    r64             : mr        48 29 /r",
"sub    r8     rm8              : rm        2A /r",
"sub    r16    rm16             : rm        66 2B /r",
"sub    r32    rm32             : rm        2B /r",
"sub    r64    rm64             : rm        48 2B /r",
//----------------------------------------------------------
"sbb    al      imm8            : i         1C i",
"sbb    rm8     imm8            : mi        80 /3 i",
"sbb    rm16    imm8            : mi        66 83 /3 i",
"sbb    rm32    imm8            : mi        83 /3 i",
"sbb    rm64    imm8            : mi        48 83 /3 i",
"sbb    ax      imm16           : i         66 1D i",
"sbb    rm16    imm16           : mi        66 81 /3 i",
"sbb    eax     imm32           : i         1D i",
"sbb    rm32    imm32           : mi        81 /3 i",
"sbb    rax     imm32           : i         48 1D i",
"sbb    rm64    imm32           : mi        48 81 /3 i",
"sbb    rm8     r8              : mr        18 /r",
"sbb    rm16    r16             : mr        66 19 /r",
"sbb    rm32    r32             : mr        19 /r",
"sbb    rm64    r64             : mr        48 19 /r",
"sbb    r8     rm8              : rm        1A /r",
"sbb    r16    rm16             : rm        66 1B /r",
"sbb    r32    rm32             : rm        1B /r",
"sbb    r64    rm64             : rm        48 1B /r",
//----------------------------------------------------------
"cmp    al      imm8            : i         3C i",
"cmp    rm8     imm8            : mi        80 /7 i",
"cmp    rm16    imm8            : mi        66 83 /7 i",
"cmp    rm32    imm8            : mi        83 /7 i",
"cmp    rm64    imm8            : mi        48 83 /7 i",
"cmp    ax      imm16           : i         66 3D i",
"cmp    rm16    imm16           : mi        66 81 /7 i",
"cmp    eax     imm32           : i         3D i",
"cmp    rm32    imm32           : mi        81 /7 i",
"cmp    rax     imm32           : i         48 3D i",
"cmp    rm64    imm32           : mi        48 81 /7 i",
"cmp    rm8     r8              : mr        38 /r",
"cmp    rm16    r16             : mr        66 39 /r",
"cmp    rm32    r32             : mr        39 /r",
"cmp    rm64    r64             : mr        48 39 /r",
"cmp    r8     rm8              : rm        3A /r",
"cmp    r16    rm16             : rm        66 3B /r",
"cmp    r32    rm32             : rm        3B /r",
"cmp    r64    rm64             : rm        48 3B /r",
//----------------------------------------------------------
"or     al      imm8            : i         0C i",
"or     rm8     imm8            : mi        80 /1 i",
"or     rm16    imm8            : mi        66 83 /1 i",
"or     rm32    imm8            : mi        83 /1 i",
"or     rm64    imm8            : mi        48 83 /1 i",
"or     ax      imm16           : i         66 0D i",
"or     rm16    imm16           : mi        66 81 /1 i",
"or     eax     imm32           : i         0D i",
"or     rm32    imm32           : mi        81 /1 i",
"or     rax     imm32           : i         48 0D i",
"or     rm64    imm32           : mi        48 81 /1 i",
"or     rm8     r8              : mr        08 /r",
"or     rm16    r16             : mr        66 09 /r",
"or     rm32    r32             : mr        09 /r",
"or     rm64    r64             : mr        48 09 /r",
"or     r8     rm8              : rm        0A /r",
"or     r16    rm16             : rm        66 0B /r",
"or     r32    rm32             : rm        0B /r",
"or     r64    rm64             : rm        48 0B /r",
//----------------------------------------------------------
"xor    al      imm8            : i         34 i",
"xor    rm8     imm8            : mi        80 /6 i",
"xor    rm16    imm8            : mi        66 83 /6 i",
"xor    rm32    imm8            : mi        83 /6 i",
"xor    rm64    imm8            : mi        48 83 /6 i",
"xor    ax      imm16           : i         66 35 i",
"xor    rm16    imm16           : mi        66 81 /6 i",
"xor    eax     imm32           : i         35 i",
"xor    rm32    imm32           : mi        81 /6 i",
"xor    rax     imm32           : i         48 35 i",
"xor    rm64    imm32           : mi        48 81 /6 i",
"xor    rm8     r8              : mr        30 /r",
"xor    rm16    r16             : mr        66 31 /r",
"xor    rm32    r32             : mr        31 /r",
"xor    rm64    r64             : mr        48 31 /r",
"xor    r8     rm8              : rm        32 /r",
"xor    r16    rm16             : rm        66 33 /r",
"xor    r32    rm32             : rm        33 /r",
"xor    r64    rm64             : rm        48 33 /r",
//----------------------------------------------------------
"and    al      imm8            : i         24 i",
"and    rm8     imm8            : mi        80 /4 i",
"and    rm16    imm8            : mi        66 83 /4 i",
"and    rm32    imm8            : mi        83 /4 i",
"and    rm64    imm8            : mi        48 83 /4 i",
"and    ax      imm16           : i         66 25 i",
"and    rm16    imm16           : mi        66 81 /4 i",
"and    eax     imm32           : i         25 i",
"and    rm32    imm32           : mi        81 /4 i",
"and    rax     imm32           : i         48 25 i",
"and    rm64    imm32           : mi        48 81 /4 i",
"and    rm8     r8              : mr        20 /r",
"and    rm16    r16             : mr        66 21 /r",
"and    rm32    r32             : mr        21 /r",
"and    rm64    r64             : mr        48 21 /r",
"and    r8     rm8              : rm        22 /r",
"and    r16    rm16             : rm        66 23 /r",
"and    r32    rm32             : rm        23 /r",
"and    r64    rm64             : rm        48 23 /r",
//----------------------------------------------------------
"xchg   ax      r16             : o         66 90+r",
"xchg   r16     ax              : o         66 90+r",
"xchg   eax     r32             : o         90+r",
"xchg   r32     eax             : o         90+r",
"xchg   rax     r64             : o         48 90+r",
"xchg   r64     rax             : o         48 90+r",
"xchg   rm8     r8              : mr        86 /r",
"xchg   rm16    r16             : mr        66 87 /r",
"xchg   rm32    r32             : mr        87 /r",
"xchg   rm64    r64             : mr        48 87 /r",
"xchg   r8      rm8             : rm        86 /r",
"xchg   r16     rm16            : rm        66 87 /r",
"xchg   r32     rm32            : rm        87 /r",
"xchg   r64     rm64            : rm        48 87 /r",
//----------------------------------------------------------
"test   al      imm8            : i         A8 i",
"test   ax      imm16           : i         66 A9 i",
"test   eax     imm32           : i         A9 i",
"test   rax     imm64           : i         48 A9 i",
"test   rm8     imm8            : mi        F6 /0 i",
"test   rm16    imm16           : mi        66 F7 /0 i",
"test   rm32    imm32           : mi        F7 /0 i",
"test   rm64    imm32           : mi        48 F7 /0 i",
"test   rm8     r8              : mr        84 /r",
"test   rm16    r16             : mr        66 85 /r",
"test   rm32    r32             : mr        85 /r",
"test   rm64    r64             : mr        48 85 /r",
//----------------------------------------------------------
"rcl    rm8     imm8            : mi        C0 /2 i",
"rcl    rm16    imm8            : mi        66 C1 /2 i",
"rcl    rm32    imm8            : mi        C1 /2 i",
"rcl    rm64    imm8            : mi        48 C1 /2 i",
"rcl    rm8     cl              : mc        D2 /2",
"rcl    rm16    cl              : mc        66 D3 /2",
"rcl    rm32    cl              : mc        D3 /2",
"rcl    rm64    cl              : mc        48 D3 /2",
"rcl    rm8                     : m         D0 /2",
"rcl    rm16                    : m         66 D1 /2",
"rcl    rm32                    : m         D1 /2",
"rcl    rm64                    : m         48 D1 /2",
//----------------------------------------------------------
"rcr    rm8     imm8            : mi        C0 /3 i",
"rcr    rm16    imm8            : mi        66 C1 /3 i",
"rcr    rm32    imm8            : mi        C1 /3 i",
"rcr    rm64    imm8            : mi        48 C1 /3 i",
"rcr    rm8     cl              : mc        D2 /3",
"rcr    rm16    cl              : mc        66 D3 /3",
"rcr    rm32    cl              : mc        D3 /3",
"rcr    rm64    cl              : mc        48 D3 /3",
"rcr    rm8                     : m         D0 /3",
"rcr    rm16                    : m         66 D1 /3",
"rcr    rm32                    : m         D1 /3",
"rcr    rm64                    : m         48 D1 /3",
//----------------------------------------------------------
"rol    rm8     imm8            : mi        C0 /0 i",
"rol    rm16    imm8            : mi        66 C1 /0 i",
"rol    rm32    imm8            : mi        C1 /0 i",
"rol    rm64    imm8            : mi        48 C1 /0 i",
"rol    rm8     cl              : mc        D2 /0",
"rol    rm16    cl              : mc        66 D3 /0",
"rol    rm32    cl              : mc        D3 /0",
"rol    rm64    cl              : mc        48 D3 /0",
"rol    rm8                     : m         D0 /0",
"rol    rm16                    : m         66 D1 /0",
"rol    rm32                    : m         D1 /0",
"rol    rm64                    : m         48 D1 /0",
//----------------------------------------------------------
"ror    rm8     imm8            : mi        C0 /1 i",
"ror    rm16    imm8            : mi        66 C1 /1 i",
"ror    rm32    imm8            : mi        C1 /1 i",
"ror    rm64    imm8            : mi        48 C1 /1 i",
"ror    rm8     cl              : mc        D2 /1",
"ror    rm16    cl              : mc        66 D3 /1",
"ror    rm32    cl              : mc        D3 /1",
"ror    rm64    cl              : mc        48 D3 /1",
"ror    rm8                     : m         D0 /1",
"ror    rm16                    : m         66 D1 /1",
"ror    rm32                    : m         D1 /1",
"ror    rm64                    : m         48 D1 /1",
//----------------------------------------------------------
"shl    rm8     imm8            : mi        C0 /4 i",
"shl    rm16    imm8            : mi        66 C1 /4 i",
"shl    rm32    imm8            : mi        C1 /4 i",
"shl    rm64    imm8            : mi        48 C1 /4 i",
"shl    rm8     cl              : mc        D2 /4",
"shl    rm16    cl              : mc        66 D3 /4",
"shl    rm32    cl              : mc        D3 /4",
"shl    rm64    cl              : mc        48 D3 /4",
"shl    rm8                     : m         D0 /4",
"shl    rm16                    : m         66 D1 /4",
"shl    rm32                    : m         D1 /4",
"shl    rm64                    : m         48 D1 /4",
//----------------------------------------------------------
"shr    rm8     imm8            : mi        C0 /5 i",
"shr    rm16    imm8            : mi        66 C1 /5 i",
"shr    rm32    imm8            : mi        C1 /5 i",
"shr    rm64    imm8            : mi        48 C1 /5 i",
"shr    rm8     cl              : mc        D2 /5",
"shr    rm16    cl              : mc        66 D3 /5",
"shr    rm32    cl              : mc        D3 /5",
"shr    rm64    cl              : mc        48 D3 /5",
"shr    rm8                     : m         D0 /5",
"shr    rm16                    : m         66 D1 /5",
"shr    rm32                    : m         D1 /5",
"shr    rm64                    : m         48 D1 /5",
//----------------------------------------------------------
"sar    rm8     imm8            : mi        C0 /7 i",
"sar    rm16    imm8            : mi        66 C1 /7 i",
"sar    rm32    imm8            : mi        C1 /7 i",
"sar    rm64    imm8            : mi        48 C1 /7 i",
"sar    rm8     cl              : mc        D2 /7",
"sar    rm16    cl              : mc        66 D3 /7",
"sar    rm32    cl              : mc        D3 /7",
"sar    rm64    cl              : mc        48 D3 /7",
"sar    rm8                     : m         D0 /7",
"sar    rm16                    : m         66 D1 /7",
"sar    rm32                    : m         D1 /7",
"sar    rm64                    : m         48 D1 /7",
//----------------------------------------------------------
"inc    rm8                     : m         FE /0",
"inc    rm16                    : m         66 FF /0",
"inc    rm32                    : m         FF /0",
"inc    rm64                    : m         48 FF /0",
//----------------------------------------------------------
"dec    rm8                     : m         FE /1",
"dec    rm16                    : m         66 FF /1",
"dec    rm32                    : m         FF /1",
"dec    rm64                    : m         48 FF /1",
//----------------------------------------------------------
"not    rm8                     : m         F6 /2",
"not    rm16                    : m         66 F7 /2",
"not    rm32                    : m         F7 /2",
"not    rm64                    : m         48 F7 /2",
//----------------------------------------------------------
"neg    rm8                     : m         F6 /3",
"neg    rm16                    : m         66 F7 /3",
"neg    rm32                    : m         F7 /3",
"neg    rm64                    : m         48 F7 /3",
//----------------------------------------------------------
"mul    rm8                     : m         F6 /4",
"mul    rm16                    : m         66 F7 /4",
"mul    rm32                    : m         F7 /4",
"mul    rm64                    : m         48 F7 /4",
//----------------------------------------------------------
"imul   r16     rm16    imm8    : rmi       66 6B /r i",
"imul   r32     rm32    imm8    : rmi       6B /r i",
"imul   r64     rm64    imm8    : rmi       48 6B /r i",
"imul   r16     rm16    imm16   : rmi       66 69 /r i",
"imul   r32     rm32    imm32   : rmi       69 /r i",
"imul   r64     rm64    imm32   : rmi       48 69 /r i",
"imul   r16     rm16            : rm        66 0F AF /r",
"imul   r32     rm32            : rm        0F AF /r",
"imul   r64     rm64            : rm        48 0F AF /r",
"imul   rm8                     : m         F6 /5",
"imul   rm16                    : m         66 F7 /5",
"imul   rm32                    : m         F7 /5",
"imul   rm64                    : m         48 F7 /5",
//----------------------------------------------------------
"div    rm8                     : m         F6 /6",
"div    rm16                    : m         66 F7 /6",
"div    rm32                    : m         F7 /6",
"div    rm64                    : m         48 F7 /6",
//----------------------------------------------------------
"idiv   rm8                     : m         F6 /7",
"idiv   rm16                    : m         66 F7 /7",
"idiv   rm32                    : m         F7 /7",
"idiv   rm64                    : m         48 F7 /7",
//----------------------------------------------------------
"in     al      imm8            : i         E4 i",
"in     ax      imm8            : i         66 E5 i",
"in     eax     imm8            : i         E5 i",
"in     al      dx              : zo        EC",
"in     ax      dx              : zo        66 ED",
"in     eax     dx              : zo        ED",
//----------------------------------------------------------
"out    imm8    al              : i         E6 i",
"out    imm8    ax              : i         66 E7 i",
"out    imm8    eax             : i         E7 i",
"out    dx      al              : zo        EE",
"out    dx      ax              : zo        66 EF",
"out    dx      eax             : zo        EF",
//----------------------------------------------------------
"stosb                          : zo        AA",
"stosw                          : zo        66 AB",
"stosd                          : zo        AB",
"stosq                          : zo        48 AB",
//----------------------------------------------------------
"lodsb                          : zo        AC",
"lodsw                          : zo        66 AD",
"lodsd                          : zo        AD",
"lodsq                          : zo        48 AD",
//----------------------------------------------------------
"insb                           : zo        6C",
"insw                           : zo        66 6D",
"insd                           : zo        6D",
//----------------------------------------------------------
"outsb                          : zo        6E",
"outsw                          : zo        66 6F",
"outsd                          : zo        6F",
//----------------------------------------------------------
"cmpsb                          : zo        A6",
"cmpsw                          : zo        66 A7",
"cmpsd                          : zo        A7",
"cmpsq                          : zo        48 A7",
//----------------------------------------------------------
"scasb                          : zo        AE",
"scasw                          : zo        66 AF",
"scasd                          : zo        AF",
"scasq                          : zo        48 AF",
//----------------------------------------------------------
"bsf    r16     rm16            : rm        66 0F BC /r",
"bsf    r32     rm32            : rm        0F BC /r",
"bsf    r64     rm64            : rm        48 0F BC /r",
//----------------------------------------------------------
"bsr    r16     rm16            : rm        66 0F BD /r",
"bsr    r32     rm32            : rm        0F BD /r",
"bsr    r64     rm64            : rm        48 0F BD /r",
//----------------------------------------------------------
"bswap  r32                     : o         0F C8+r",
"bswap  r64                     : o         48 0F C8+r",
//----------------------------------------------------------
"bt     rm16    r16             : mr        66 0F A3 /r",
"bt     rm32    r32             : mr        0F A3 /r",
"bt     rm64    r64             : mr        48 0F A3 /r",
"bt     rm16    imm8            : mi        66 0F BA /4 i",
"bt     rm32    imm8            : mi        0F BA /4 i",
"bt     rm64    imm8            : mi        48 0F BA /4 i",
//----------------------------------------------------------
"btc    rm16    r16             : mr        66 0F BB /r",
"btc    rm32    r32             : mr        0F BB /r",
"btc    rm64    r64             : mr        48 0F BB /r",
"btc    rm16    imm8            : mi        66 0F BA /7 i",
"btc    rm32    imm8            : mi        0F BA /7 i",
"btc    rm64    imm8            : mi        48 0F BA /7 i",
//----------------------------------------------------------
"btr    rm16    r16             : mr        66 0F B3 /r",
"btr    rm32    r32             : mr        0F B3 /r",
"btr    rm64    r64             : mr        48 0F B3 /r",
"btr    rm16    imm8            : mi        66 0F BA /6 i",
"btr    rm32    imm8            : mi        0F BA /6 i",
"btr    rm64    imm8            : mi        48 0F BA /6 i",
//----------------------------------------------------------
"bts    rm16    r16             : mr        66 0F AB /r",
"bts    rm32    r32             : mr        0F AB /r",
"bts    rm64    r64             : mr        48 0F AB /r",
"bts    rm16    imm8            : mi        66 0F BA /5 i",
"bts    rm32    imm8            : mi        0F BA /5 i",
"bts    rm64    imm8            : mi        48 0F BA /5 i",
//----------------------------------------------------------
"lzcnt  r16     rm16            : rm        F3 66 0F BD /r",
"lzcnt  r32     rm32            : rm        F3 0F BD /r",
"lzcnt  r64     rm64            : rm        F3 48 0F BD /r",
//----------------------------------------------------------
"tzcnt  r16     rm16            : rm        F3 66 0F BC /r",
"tzcnt  r32     rm32            : rm        F3 0F BC /r",
"tzcnt  r64     rm64            : rm        F3 48 0F BC /r",
//----------------------------------------------------------
"popcnt r16     rm16            : rm        F3 66 0F B8 /r",
"popcnt r32     rm32            : rm        F3 0F B8 /r",
"popcnt r64     rm64            : rm        F3 48 0F B8 /r",
//----------------------------------------------------------
//                      SSE Instructions
//----------------------------------------------------------
"addpd      xmm     xmm         : rm        66 0F 58 /r",
"addpd      xmm     m128        : rm        66 0F 58 /r",
"addps      xmm     xmm         : rm        0F 58 /r",
"addps      xmm     m128        : rm        0F 58 /r",
"addsd      xmm     xmm         : rm        F2 0F 58 /r",
"addsd      xmm     m64         : rm        F2 0F 58 /r",
"addss      xmm     xmm         : rm        F3 0F 58 /r",
"addss      xmm     m32         : rm        F3 0F 58 /r",
//----------------------------------------------------------
"addsubpd   xmm     xmm         : rm        66 0F D0 /r",
"addsubpd   xmm     m128        : rm        66 0F D0 /r",
"addsubps   xmm     xmm         : rm        F2 0F D0 /r",
"addsubps   xmm     m128        : rm        F2 0F D0 /r",
//----------------------------------------------------------
"andnpd     xmm     xmm         : rm        66 0F 55 /r",
"andnpd     xmm     m128        : rm        66 0F 55 /r",
"andnps     xmm     xmm         : rm        0F 55 /r",
"andnps     xmm     m128        : rm        0F 55 /r",
//----------------------------------------------------------
"andpd      xmm     xmm         : rm        66 0F 54 /r",
"andpd      xmm     m128        : rm        66 0F 54 /r",
"andps      xmm     xmm         : rm        0F 54 /r",
"andps      xmm     m128        : rm        0F 54 /r",
//----------------------------------------------------------
"cmppd      xmm     xmm    imm8 : rmi       66 0F C2 /r i",
"cmppd      xmm     m128   imm8 : rmi       66 0F C2 /r i",
"cmpps      xmm     xmm    imm8 : rmi       0F C2 /r i",
"cmpps      xmm     m128   imm8 : rmi       0F C2 /r i",
"cmpsd      xmm     xmm    imm8 : rmi       F2 0F C2 /r i",
"cmpsd      xmm     m64    imm8 : rmi       F2 0F C2 /r i",
"cmpss      xmm     xmm    imm8 : rmi       F3 0F C2 /r i",
"cmpss      xmm     m32    imm8 : rmi       F3 0F C2 /r i",
//----------------------------------------------------------
"comisd     xmm     xmm         : rm        66 0F 2F /r",
"comisd     xmm     m64         : rm        66 0F 2F /r",
"comiss     xmm     xmm         : rm        0F 2F /r",
"comiss     xmm     m32         : rm        0F 2F /r",
//----------------------------------------------------------
"ucomisd    xmm     xmm         : rm        66 0F 2E /r",
"ucomisd    xmm     m64         : rm        66 0F 2E /r",
"ucomiss    xmm     xmm         : rm        0F 2E /r",
"ucomiss    xmm     m32         : rm        0F 2E /r",
//----------------------------------------------------------
"cvtdq2pd   xmm     xmm         : rm        F3 0F E6 /r",
"cvtdq2pd   xmm     m64         : rm        F3 0F E6 /r",
"cvtdq2ps   xmm     xmm         : rm        0F 5B /r",
"cvtdq2ps   xmm     m128        : rm        0F 5B /r",
"cvtpd2dq   xmm     xmm         : rm        F2 0F E6 /r",
"cvtpd2dq   xmm     m128        : rm        F2 0F E6 /r",
"cvtpd2ps   xmm     xmm         : rm        66 0F 5A /r",
"cvtpd2ps   xmm     m128        : rm        66 0F 5A /r",
"cvtps2dq   xmm     xmm         : rm        66 0F 5B /r",
"cvtps2dq   xmm     m128        : rm        66 0F 5B /r",
"cvtps2pd   xmm     xmm         : rm        0F 5A /r",
"cvtps2pd   xmm     m64         : rm        0F 5A /r",
"cvtsd2ss   xmm     xmm         : rm        F2 0F 5A /r",
"cvtsd2ss   xmm     m64         : rm        F2 0F 5A /r",
"cvtsi2sd   xmm     rm32        : rm        F2 0F 2A /r",
"cvtsi2sd   xmm     rm64        : rm        F2 48 0F 2A /r",
"cvtsi2ss   xmm     rm32        : rm        F3 0F 2A /r",
"cvtsi2ss   xmm     rm64        : rm        F3 48 0F 2A /r",
"cvtss2sd   xmm     xmm         : rm        F3 0F 5A /r",
"cvtss2sd   xmm     m32         : rm        F3 0F 5A /r",
"cvtss2si   r32     xmm         : rm        F3 0F 2D /r",
"cvtss2si   r32     m32         : rm        F3 0F 2D /r",
"cvtss2si   r64     xmm         : rm        F3 48 0F 2D /r",
"cvtss2si   r64     m32         : rm        F3 48 0F 2D /r",
"cvttpd2dq  xmm     xmm         : rm        66 0F E6 /r",
"cvttpd2dq  xmm     m128        : rm        66 0F E6 /r",
"cvttps2dq  xmm     xmm         : rm        F3 0F 5B /r",
"cvttps2dq  xmm     m128        : rm        F3 0F 5B /r",
"cvttsd2si  r32     xmm         : rm        F2 0F 2C /r",
"cvttsd2si  r32     m64         : rm        F2 0F 2C /r",
"cvttsd2si  r64     xmm         : rm        F2 48 0F 2C /r",
"cvttsd2si  r64     m64         : rm        F2 48 0F 2C /r",
"cvttss2si  r32     xmm         : rm        F3 0F 2C /r",
"cvttss2si  r32     m32         : rm        F3 0F 2C /r",
"cvttss2si  r64     xmm         : rm        F3 48 0F 2C /r",
"cvttss2si  r64     m32         : rm        F3 48 0F 2C /r",
//----------------------------------------------------------
"divpd      xmm     xmm         : rm        66 0F 5E /r",
"divpd      xmm     m128        : rm        66 0F 5E /r",
"divps      xmm     xmm         : rm        0F 5E /r",
"divps      xmm     m128        : rm        0F 5E /r",
"divsd      xmm     xmm         : rm        F2 0F 5E /r",
"divsd      xmm     m64         : rm        F2 0F 5E /r",
"divss      xmm     xmm         : rm        F3 0F 5E /r",
"divss      xmm     m32         : rm        F3 0F 5E /r",
//----------------------------------------------------------
"dppd       xmm     xmm    imm8 : rmi       66 0F 3A 41 /r i",
"dppd       xmm     m128   imm8 : rmi       66 0F 3A 41 /r i",
"dpps       xmm     xmm    imm8 : rmi       66 0F 3A 40 /r i",
"dpps       xmm     m128   imm8 : rmi       66 0F 3A 40 /r i",
//----------------------------------------------------------
"extractps  rm32    xmm    imm8 : mri       66 0F 3A 17 /r i",
"insertps   xmm     xmm    imm8 : rmi       66 0F 3A 21 /r i",
"insertps   xmm     m32    imm8 : rmi       66 0F 3A 21 /r i",
//----------------------------------------------------------
"haddpd     xmm     xmm         : rm        66 0F 7C /r",
"haddpd     xmm     m128        : rm        66 0F 7C /r",
"haddps     xmm     xmm         : rm        F2 0F 7C /r",
"haddps     xmm     m128        : rm        F2 0F 7C /r",
//----------------------------------------------------------
"hsubpd     xmm     xmm         : rm        66 0F 7D /r",
"hsubpd     xmm     m128        : rm        66 0F 7D /r",
"hsubps     xmm     xmm         : rm        F2 0F 7D /r",
"hsubps     xmm     m128        : rm        F2 0F 7D /r",
//----------------------------------------------------------
"maskmovdqu xmm     xmm         : rm        66 0F F7 /r",
//----------------------------------------------------------
"maxpd      xmm     xmm         : rm        66 0F 5F /r",
"maxpd      xmm     m128        : rm        66 0F 5F /r",
"maxps      xmm     xmm         : rm        0F 5F /r",
"maxps      xmm     m128        : rm        0F 5F /r",
"maxsd      xmm     xmm         : rm        F2 0F 5F /r",
"maxsd      xmm     m64         : rm        F2 0F 5F /r",
"maxss      xmm     xmm         : rm        F3 0F 5F /r",
"maxss      xmm     m32         : rm        F3 0F 5F /r",
//----------------------------------------------------------
"minpd      xmm     xmm         : rm        66 0F 5D /r",
"minpd      xmm     m128        : rm        66 0F 5D /r",
"minps      xmm     xmm         : rm        0F 5D /r",
"minps      xmm     m128        : rm        0F 5D /r",
"minsd      xmm     xmm         : rm        F2 0F 5D /r",
"minsd      xmm     m64         : rm        F2 0F 5D /r",
"minss      xmm     xmm         : rm        F3 0F 5D /r",
"minss      xmm     m32         : rm        F3 0F 5D /r",
//----------------------------------------------------------
"movapd     xmm     xmm         : rm        66 0F 28 /r",
"movapd     xmm     m128        : rm        66 0F 28 /r",
"movapd     m128    xmm         : mr        66 0F 29 /r",
"movaps     xmm     xmm         : rm        0F 28 /r",
"movaps     xmm     m128        : rm        0F 28 /r",
"movaps     m128    xmm         : mr        0F 29 /r",
//----------------------------------------------------------
"movd       xmm     rm32        : rm        66 0F 6E /r",
"movd       rm32    xmm         : mr        66 0F 7E /r",
"movq       xmm     rm64        : rm        66 48 0F 6E /r",
"movq       rm64    xmm         : mr        66 48 0F 7E /r",
//----------------------------------------------------------
"movddup    xmm     xmm         : rm        F2 0F 12 /r",
"movddup    xmm     m64         : rm        F2 0F 12 /r",
//----------------------------------------------------------
"movdqa     xmm     xmm         : rm        66 0F 6F /r",
"movdqa     xmm     m128        : rm        66 0F 6F /r",
"movdqa     m128    xmm         : mr        66 0F 7F /r",
//----------------------------------------------------------
"movdqu     xmm     xmm         : rm        F3 0F 6F /r",
"movdqu     xmm     m128        : rm        F3 0F 6F /r",
"movdqu     m128    xmm         : mr        F3 0F 7F /r",
//----------------------------------------------------------
"movhlps    xmm     xmm         : rm        0F 12 /r",
"movlhps    xmm     xmm         : rm        0F 16 /r",
//----------------------------------------------------------
"movhpd     xmm     m64         : rm        66 0F 16 /r",
"movhpd     m64     xmm         : mr        66 0F 17 /r",
"movhps     xmm     m64         : rm        0F 16 /r",
"movhps     m64     xmm         : mr        0F 17 /r",
//----------------------------------------------------------
"movlpd     xmm     m64         : rm        66 0F 12 /r",
"movlpd     m64     xmm         : mr        66 0F 13 /r",
"movlps     xmm     m64         : rm        0F 12 /r",
"movlps     m64     xmm         : mr        0F 13 /r",
//----------------------------------------------------------
"movsd      xmm     xmm         : rm        F2 0F 10 /r",
"movsd      xmm     m64         : rm        F2 0F 10 /r",
"movsd      m64     xmm         : mr        F2 0F 11 /r",
"movss      xmm     xmm         : rm        F3 0F 10 /r",
"movss      xmm     m32         : rm        F3 0F 10 /r",
"movss      m32     xmm         : mr        F3 0F 11 /r",
//----------------------------------------------------------
"movshdup   xmm     xmm         : rm        F3 0F 16 /r",
"movshdup   xmm     m128        : rm        F3 0F 16 /r",
"movsldup   xmm     xmm         : rm        F3 0F 12 /r",
"movsldup   xmm     m128        : rm        F3 0F 12 /r",
//----------------------------------------------------------
"movupd     xmm     xmm         : rm        66 0F 10 /r",
"movupd     xmm     m128        : rm        66 0F 10 /r",
"movupd     m128    xmm         : mr        66 0F 11 /r",
"movups     xmm     xmm         : rm        0F 10 /r",
"movups     xmm     m128        : rm        0F 10 /r",
"movups     m128    xmm         : mr        0F 11 /r",
//----------------------------------------------------------
"mpsadbw    xmm     xmm    imm8 : rmi       66 0F 3A 42 /r i",
"mpsadbw    xmm     m128   imm8 : rmi       66 0F 3A 42 /r i",
//----------------------------------------------------------
"mulpd      xmm     xmm         : rm        66 0F 59 /r",
"mulpd      xmm     m128        : rm        66 0F 59 /r",
"mulps      xmm     xmm         : rm        0F 59 /r",
"mulps      xmm     m128        : rm        0F 59 /r",
"mulsd      xmm     xmm         : rm        F2 0F 59 /r",
"mulsd      xmm     m64         : rm        F2 0F 59 /r",
"mulss      xmm     xmm         : rm        F3 0F 59 /r",
"mulss      xmm     m32         : rm        F3 0F 59 /r",
//----------------------------------------------------------
"orpd       xmm     xmm         : rm        66 0F 56 /r",
"orpd       xmm     m128        : rm        66 0F 56 /r",
"orps       xmm     xmm         : rm        0F 56 /r",
"orps       xmm     m128        : rm        0F 56 /r",
//----------------------------------------------------------
"rcpps      xmm     xmm         : rm        0F 53 /r",
"rcpps      xmm     m128        : rm        0F 53 /r",
"rcpss      xmm     xmm         : rm        F3 0F 53 /r",
"rcpss      xmm     m128        : rm        F3 0F 53 /r",
//----------------------------------------------------------
"roundpd    xmm     xmm    imm8 : rmi       66 0F 3A 09 /r i",
"roundpd    xmm     m128   imm8 : rmi       66 0F 3A 09 /r i",
"roundps    xmm     xmm    imm8 : rmi       66 0F 3A 08 /r i",
"roundps    xmm     m128   imm8 : rmi       66 0F 3A 08 /r i",
"roundsd    xmm     xmm    imm8 : rmi       66 0F 3A 0B /r i",
"roundsd    xmm     m64    imm8 : rmi       66 0F 3A 0B /r i",
"roundss    xmm     xmm    imm8 : rmi       66 0F 3A 0A /r i",
"roundss    xmm     m32    imm8 : rmi       66 0F 3A 0A /r i",
//----------------------------------------------------------
"rsqrtps    xmm     xmm         : rm        0F 52 /r",
"rsqrtps    xmm     m128        : rm        0F 52 /r",
"rsqrtss    xmm     xmm         : rm        F3 0F 52 /r",
"rsqrtss    xmm     m32         : rm        F3 0F 52 /r",
//----------------------------------------------------------
"shufpd     xmm     xmm    imm8 : rmi       66 0F C6 /r i",
"shufpd     xmm     m128   imm8 : rmi       66 0F C6 /r i",
"shufps     xmm     xmm    imm8 : rmi       0F C6 /r i",
"shufps     xmm     m128   imm8 : rmi       0F C6 /r i",
//----------------------------------------------------------
"sqrtpd     xmm     xmm         : rm        66 0F 51 /r",
"sqrtpd     xmm     m128        : rm        66 0F 51 /r",
"sqrtps     xmm     xmm         : rm        0F 51 /r",
"sqrtps     xmm     m128        : rm        0F 51 /r",
"sqrtsd     xmm     xmm         : rm        F2 0F 51 /r",
"sqrtsd     xmm     m64         : rm        F2 0F 51 /r",
"sqrtss     xmm     xmm         : rm        F3 0F 51 /r",
"sqrtss     xmm     m32         : rm        F3 0F 51 /r",
//----------------------------------------------------------
"subpd      xmm     xmm         : rm        66 0F 5C /r",
"subpd      xmm     m128        : rm        66 0F 5C /r",
"subps      xmm     xmm         : rm        0F 5C /r",
"subps      xmm     m128        : rm        0F 5C /r",
"subsd      xmm     xmm         : rm        F2 0F 5C /r",
"subsd      xmm     m64         : rm        F2 0F 5C /r",
"subss      xmm     xmm         : rm        F3 0F 5C /r",
"subss      xmm     m32         : rm        F3 0F 5C /r",
//----------------------------------------------------------
"xorpd      xmm     xmm         : rm        66 0F 57 /r",
"xorpd      xmm     m128        : rm        66 0F 57 /r",
"xorps      xmm     xmm         : rm        0F 57 /r",
"xorps      xmm     m128        : rm        0F 57 /r"
};